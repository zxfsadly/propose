import {
  ViteSlidevPlugin,
  getIndexHtml
} from "./chunk-DUP46DVM.mjs";
import {
  __toModule
} from "./chunk-NLANYDT7.mjs";

// node/build.ts
import {resolve, join} from "path";
import http from "http";
import fs from "fs-extra";
import {build as viteBuild, mergeConfig} from "vite";
import connect from "connect";
import sirv from "sirv";
async function build(options, pluginOptions = {}, viteConfig = {}) {
  const indexPath = resolve(options.userRoot, "index.html");
  let originalIndexHTML;
  if (fs.existsSync(indexPath))
    originalIndexHTML = await fs.readFile(indexPath, "utf-8");
  await fs.writeFile(indexPath, await getIndexHtml(options), "utf-8");
  let config = void 0;
  try {
    await viteBuild(mergeConfig(viteConfig, {
      plugins: [
        await ViteSlidevPlugin(options, pluginOptions),
        {
          name: "resolve-config",
          configResolved(_config) {
            config = _config;
          }
        }
      ]
    }));
  } finally {
    if (originalIndexHTML != null)
      await fs.writeFile(indexPath, originalIndexHTML, "utf-8");
    else
      await fs.unlink(indexPath);
  }
  if (options.data.config.download === true || options.data.config.download === "auto") {
    const {exportSlides} = await Promise.resolve().then(() => __toModule(require("./export-EFUY2XAP.mjs")));
    const port = 12445;
    const app = connect();
    const server = http.createServer(app);
    app.use(config.base, sirv(config.build.outDir, {
      etag: true,
      single: true
    }));
    server.listen(port);
    await exportSlides({
      port,
      total: options.data.slides.length,
      format: "pdf",
      output: join(config.build.outDir, "slidev-exported.pdf"),
      base: config.base
    });
    server.close();
  }
}
export {
  build
};
