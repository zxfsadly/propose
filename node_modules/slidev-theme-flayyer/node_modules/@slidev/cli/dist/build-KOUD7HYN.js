"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }


var _chunkT2VCIMLGjs = require('./chunk-T2VCIMLG.js');


var _chunkAV6ARAKLjs = require('./chunk-AV6ARAKL.js');

// node/build.ts
var _path = require('path');
var _http = require('http'); var _http2 = _interopRequireDefault(_http);
var _fsextra = require('fs-extra'); var _fsextra2 = _interopRequireDefault(_fsextra);
var _vite = require('vite');
var _connect = require('connect'); var _connect2 = _interopRequireDefault(_connect);
var _sirv = require('sirv'); var _sirv2 = _interopRequireDefault(_sirv);
async function build(options, pluginOptions = {}, viteConfig = {}) {
  const indexPath = _path.resolve.call(void 0, options.userRoot, "index.html");
  let originalIndexHTML;
  if (_fsextra2.default.existsSync(indexPath))
    originalIndexHTML = await _fsextra2.default.readFile(indexPath, "utf-8");
  await _fsextra2.default.writeFile(indexPath, await _chunkT2VCIMLGjs.getIndexHtml.call(void 0, options), "utf-8");
  let config = void 0;
  try {
    await _vite.build.call(void 0, _vite.mergeConfig.call(void 0, viteConfig, {
      plugins: [
        await _chunkT2VCIMLGjs.ViteSlidevPlugin.call(void 0, options, pluginOptions),
        {
          name: "resolve-config",
          configResolved(_config) {
            config = _config;
          }
        }
      ]
    }));
  } finally {
    if (originalIndexHTML != null)
      await _fsextra2.default.writeFile(indexPath, originalIndexHTML, "utf-8");
    else
      await _fsextra2.default.unlink(indexPath);
  }
  if (options.data.config.download === true || options.data.config.download === "auto") {
    const {exportSlides} = await Promise.resolve().then(() => _chunkAV6ARAKLjs.__toModule.call(void 0, require("./export-TOIJAQFN.js")));
    const port = 12445;
    const app = _connect2.default.call(void 0, );
    const server = _http2.default.createServer(app);
    app.use(config.base, _sirv2.default.call(void 0, config.build.outDir, {
      etag: true,
      single: true
    }));
    server.listen(port);
    await exportSlides({
      port,
      total: options.data.slides.length,
      format: "pdf",
      output: _path.join.call(void 0, config.build.outDir, "slidev-exported.pdf"),
      base: config.base
    });
    server.close();
  }
}


exports.build = build;
