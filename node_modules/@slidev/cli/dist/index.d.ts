import Vue from '@vitejs/plugin-vue';
import Icons from 'unplugin-icons/vite';
import Components from 'unplugin-vue-components/vite';
import Markdown from 'vite-plugin-md';
import WindiCSS from 'vite-plugin-windicss';
import RemoteAssets from 'vite-plugin-remote-assets';
import ServerRef from 'vite-plugin-vue-server-ref';
import { ArgumentsType } from '@antfu/utils';
import { SlidevMarkdown, SlidevThemeMeta, SlidevConfig, FontOptions, ResolvedFontOptions, SlideInfoBase, SlidevFeatureFlags, SlideInfoWithPath } from '@slidev/types';
import * as vite from 'vite';
import { InlineConfig, Plugin } from 'vite';

interface SlidevEntryOptions {
    /**
     * Markdown entry
     *
     * @default 'slides.md'
     */
    entry?: string;
    /**
     * Theme id
     */
    theme?: string;
    /**
     * Root path
     *
     * @default process.cwd()
     */
    userRoot?: string;
}
interface ResolvedSlidevOptions {
    data: SlidevMarkdown;
    entry: string;
    userRoot: string;
    cliRoot: string;
    clientRoot: string;
    theme: string;
    themeRoots: string[];
    roots: string[];
    mode: 'dev' | 'build';
}
interface SlidevPluginOptions extends SlidevEntryOptions {
    vue?: ArgumentsType<typeof Vue>[0];
    markdown?: ArgumentsType<typeof Markdown>[0];
    components?: ArgumentsType<typeof Components>[0];
    windicss?: ArgumentsType<typeof WindiCSS>[0];
    icons?: ArgumentsType<typeof Icons>[0];
    remoteAssets?: ArgumentsType<typeof RemoteAssets>[0];
    serverRef?: ArgumentsType<typeof ServerRef>[0];
}
interface SlidevServerOptions {
    onDataReload?: (newData: SlidevMarkdown, data: SlidevMarkdown) => void;
}
declare function getClientRoot(): string;
declare function getCLIRoot(): string;
declare function isPath(name: string): boolean;
declare function getThemeRoots(name: string, entry: string): string[];
declare function getUserRoot(options: SlidevEntryOptions): {
    entry: string;
    userRoot: string;
};
declare function resolveOptions(options: SlidevEntryOptions, mode: ResolvedSlidevOptions['mode'], promptForInstallation?: boolean): Promise<ResolvedSlidevOptions>;

declare module 'vite' {
    interface UserConfig {
        /**
         * Custom internal plugin options for Slidev (advanced)
         *
         * @see https://github.com/slidevjs/slidev/blob/main/packages/slidev/node/options.ts#L50
         */
        slidev?: SlidevPluginOptions;
    }
}

declare function createServer(options: ResolvedSlidevOptions, viteConfig?: InlineConfig, serverOptions?: SlidevServerOptions): Promise<vite.ViteDevServer>;

declare function ViteSlidevPlugin(options: ResolvedSlidevOptions, pluginOptions: SlidevPluginOptions, serverOptions?: SlidevServerOptions): Promise<Plugin[]>;

declare function createWindiCSSPlugin({ themeRoots, clientRoot, userRoot, roots, data }: ResolvedSlidevOptions, { windicss: windiOptions }: SlidevPluginOptions): Promise<vite.Plugin[]>;

/**
 * 1,3-5,8 => [1, 3, 4, 5, 8]
 */
declare function parseRangeString(total: number, rangeStr?: string): number[];
/**
 * Accepts `16/9` `1:1` `3x4`
 */
declare function parseAspectRatio(str: string | number): number;

declare function resolveConfig(headmatter: any, themeMeta?: SlidevThemeMeta): SlidevConfig;
declare function resolveFonts(fonts?: FontOptions): ResolvedFontOptions;

declare function stringify(data: SlidevMarkdown): string;
declare function filterDisabled(data: SlidevMarkdown): SlidevMarkdown;
declare function stringifySlide(data: SlideInfoBase, idx?: number): string;
declare function prettifySlide(data: SlideInfoBase): SlideInfoBase;
declare function prettify(data: SlidevMarkdown): SlidevMarkdown;
declare function detectFeatures(code: string): SlidevFeatureFlags;
declare function parseSlide(raw: string): SlideInfoBase;
declare function parse(markdown: string, filepath?: string, themeMeta?: SlidevThemeMeta): SlidevMarkdown;
declare function mergeFeatureFlags(a: SlidevFeatureFlags, b: SlidevFeatureFlags): SlidevFeatureFlags;
declare function scanMonacoModules(md: string): string[];

declare function load(filepath: string, themeMeta?: SlidevThemeMeta, content?: string): Promise<SlidevMarkdown>;
declare function save(data: SlidevMarkdown, filepath?: string): Promise<void>;
declare function saveExternalSlide(slide: SlideInfoWithPath): Promise<void>;

declare const fs_load: typeof load;
declare const fs_save: typeof save;
declare const fs_saveExternalSlide: typeof saveExternalSlide;
declare const fs_parseRangeString: typeof parseRangeString;
declare const fs_parseAspectRatio: typeof parseAspectRatio;
declare const fs_resolveConfig: typeof resolveConfig;
declare const fs_resolveFonts: typeof resolveFonts;
declare const fs_stringify: typeof stringify;
declare const fs_filterDisabled: typeof filterDisabled;
declare const fs_stringifySlide: typeof stringifySlide;
declare const fs_prettifySlide: typeof prettifySlide;
declare const fs_prettify: typeof prettify;
declare const fs_detectFeatures: typeof detectFeatures;
declare const fs_parseSlide: typeof parseSlide;
declare const fs_parse: typeof parse;
declare const fs_mergeFeatureFlags: typeof mergeFeatureFlags;
declare const fs_scanMonacoModules: typeof scanMonacoModules;
declare namespace fs {
  export {
    fs_load as load,
    fs_save as save,
    fs_saveExternalSlide as saveExternalSlide,
    fs_parseRangeString as parseRangeString,
    fs_parseAspectRatio as parseAspectRatio,
    fs_resolveConfig as resolveConfig,
    fs_resolveFonts as resolveFonts,
    fs_stringify as stringify,
    fs_filterDisabled as filterDisabled,
    fs_stringifySlide as stringifySlide,
    fs_prettifySlide as prettifySlide,
    fs_prettify as prettify,
    fs_detectFeatures as detectFeatures,
    fs_parseSlide as parseSlide,
    fs_parse as parse,
    fs_mergeFeatureFlags as mergeFeatureFlags,
    fs_scanMonacoModules as scanMonacoModules,
  };
}

export { ResolvedSlidevOptions, SlidevEntryOptions, SlidevPluginOptions, SlidevServerOptions, ViteSlidevPlugin, createServer, createWindiCSSPlugin, getCLIRoot, getClientRoot, getThemeRoots, getUserRoot, isPath, fs as parser, resolveOptions };
