import { Plugin } from 'vite';

interface ImportInfo {
    name?: string;
    importName?: string;
    path: string;
}
interface ComponentInfo extends ImportInfo {
    sideEffects?: (ImportInfo | string)[] | ImportInfo | string;
}
declare type ComponentResolveResult = string | ComponentInfo;
declare type ComponentResolver = (name: string) => ComponentResolveResult | null | undefined | void;
interface UILibraryOptions {
    name: string;
    prefix?: string;
    entries?: string[];
}
declare type Matcher = (id: string) => boolean | null | undefined;
declare type Transformer = (code: string, id: string, path: string, query: Record<string, string>) => string;
/**
 * Plugin options.
 */
interface Options {
    /**
     * Relative paths to the directory to search for components.
     * @default 'src/components'
     */
    dirs?: string | string[];
    /**
     * Valid file extensions for components.
     * @default ['vue']
     */
    extensions?: string | string[];
    /**
     * Search for subdirectories
     * @default true
     */
    deep?: boolean;
    /**
     * Allow subdirectories as namespace prefix for components
     * @default false
     */
    directoryAsNamespace?: boolean;
    /**
     * Subdirectory paths for ignoring namespace prefixes
     * works when `directoryAsNamespace: true`
     * @default "[]"
     */
    globalNamespaces?: string[];
    /**
     * comp libraries to use auto import
     */
    libraries?: (string | UILibraryOptions)[];
    /**
     * Auto-import for custom loader (md, svg, etc.). Returns true to enable for certain files.
     *
     * @default ()=>false
     */
    customLoaderMatcher?: Matcher;
    /**
     * Pass a custom function to resolve the component importing path from the component name.
     *
     * The component names are always in PascalCase
     */
    customComponentResolvers?: ComponentResolver | ComponentResolver[];
    /**
     * Apply custom transform over the path for importing
     */
    importPathTransform?: (path: string) => string | undefined;
    /**
     * Transformer to apply
     *
     * @default 'vue3'
     */
    transformer?: 'vue3' | 'vue2';
}
declare type ResolvedOptions = Omit<Required<Options>, 'customComponentResolvers' | 'libraries' | 'extensions' | 'dirs'> & {
    customComponentResolvers: ComponentResolver[];
    libraries: UILibraryOptions[];
    extensions: string[];
    dirs: string[];
    resolvedDirs: string[];
    globs: string[];
};
declare type ComponentsImportMap = Record<string, string[] | undefined>;

declare function tryLoadVeturTags(name: string): string[] | undefined;
declare function LibraryResolver(options: UILibraryOptions): ComponentResolver;

/**
 * Resolver for Ant Design Vue
 *
 * See https://github.com/antfu/vite-plugin-components/issues/26#issuecomment-789767941 for more details
 *
 * @author @yangss3
 * @link https://antdv.com/
 */
declare const AntDesignVueResolver: () => ComponentResolver;

interface ElementPlusResolverOptions {
    /**
     * import style along with components
     *
     * @default true
     */
    importStyle?: boolean;
}
/**
 * Resolver for Element Plus
 *
 * See https://github.com/antfu/vite-plugin-components/pull/28 for more details
 *
 * @author @develar
 * @link https://element-plus.org/#/en-US
 */
declare const ElementPlusResolver: (options?: ElementPlusResolverOptions) => ComponentResolver;

interface VantResolverOptions {
    /**
     * import style along with components
     *
     * @default true
     */
    importStyle?: boolean;
}
/**
 * Resolver for Vant
 *
 * @link https://github.com/youzan/vant
 */
declare const VantResolver: (options?: VantResolverOptions) => ComponentResolver;

/**
 * Resolver for Vuetify
 *
 * @link https://github.com/vuetifyjs/vuetify
 */
declare const VuetifyResolver: () => ComponentResolver;

declare function pascalCase(str: string): string;
declare function camelCase(str: string): string;
declare function kebabCase(key: string): string;

declare function VitePluginComponents(options?: Options): Plugin;

export default VitePluginComponents;
export { AntDesignVueResolver, ComponentInfo, ComponentResolveResult, ComponentResolver, ComponentsImportMap, ElementPlusResolver, ElementPlusResolverOptions, ImportInfo, LibraryResolver, Matcher, Options, ResolvedOptions, Transformer, UILibraryOptions, VantResolver, VantResolverOptions, VuetifyResolver, camelCase, kebabCase, pascalCase, tryLoadVeturTags };
